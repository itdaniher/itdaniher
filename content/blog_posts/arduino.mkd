Arduino made embedded development accessible, giving the masses, perhaps for the first time, access to computation made relevant and tangible. 
However, this accessibility came at the expense of features and efficiency, relegating it to the world of classrooms, widgets, and one-offs.
An insane labyrinth of header files and syntactic sugar retards computational efficiency to maybe one cycle in a hundred, and hides the overhead from the prying eyes of those best suited to fix it.
Modular hardware coupled with distributable software enabled millions of individuals to create something, and like makerfaire-going Igors, endow their creations with a brain. 

The issues discussed can be tracked to limited abstractions and underdesigned hardware. 
There is no room to transition from a Wiring program, to programming in embedded C, to (heaven help you) straight assembly. 
The Arduino platform is capable of working at one level of abstraction, the level where bitbanging happens through digitalWrite, the level where kilobytes of bytecode are required to do the simplest of operations and smoothed-over C++ is as good as it gets. 

Additionally, Arduino is a platform, not a tool. 
The board itself is capable predominantly of blinking lights - changing pinstates to encode information in a wide range of digital communication protocols - offloading the application-specific functionality to third party chips on shields or breadboards.

Projects like Minibloq and Modk.it are feverishly at work designing higher and higher levl abstractions to make the same basic technology more readily accessible.
They're building a preschool on a landfill.
Projects like ZPUduino and xmegaduino are working to solve the limitions present in the Arduino hardware, but with only limited cognisence of any aspect of the software above memory mapped peripherals and CPU instructions. 

What might something different look like?
